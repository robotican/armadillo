#! /usr/bin/env python

PACKAGE='softkinetic_camera'

from dynamic_reconfigure.parameter_generator_catkin import *


gen = ParameterGenerator()

gen.add("camera_link", str_t, 0, "Camera optical frame", "base_rgbd_camera_optical_frame")

gen.add("confidence_threshold", int_t, 0, "Confidence threshold", 200, 0, 2000)

# Downsampling (using PCL voxel grid filter)
gen.add("use_voxel_grid_filter", bool_t, 0, "Enable downsampling (voxel grid) filter", False)
gen.add("voxel_grid_size", double_t, 0, "Voxel grid size", 0.01, 0.0, 0.1)

# Outlier removal (using PCL radius outlier removal filter)
gen.add("use_radius_outlier_filter", bool_t, 0, "Enable radius outlier removal filter", False)
gen.add("search_radius", double_t, 0, "Search radius", 0.05, 0.0, 0.1)
gen.add("min_neighbours", int_t, 0, "Minimum number of neightbours within the search radius", 50, 1, 500)

# PassThrough filter
gen.add("use_passthrough_filter", bool_t, 0, "Enable passthrough filter", False)
gen.add("limit_min", double_t, 0, "Limit minimum value", 0.01, 0.0, 1.0)
gen.add("limit_max", double_t, 0, "Limit maximum value", 10.0, 0.0, 10.0)

# Frustum Culling filter
gen.add("use_frustum_culling_filter", bool_t, 0, "Enable frustum culling filter", False)
gen.add("hfov", double_t, 0, "Horizontal FOV (degrees)", 90.0, 0.0, 180.0)
gen.add("vfov", double_t, 0, "Vertical FOV (degrees)", 90.0, 0.0, 180.0)
gen.add("near_plane", double_t, 0, "Near plane", 0.01, 0.0, 1.0)
gen.add("far_plane", double_t, 0, "Far plane", 10.0, 0.0, 10.0)

# Serial identification
gen.add("use_serial", bool_t, 0, "Enable serial number identification", False)
gen.add("serial", str_t, 0, "Camera serial number", "")

# Modes
mode_close = gen.const("close", str_t, "close", "Close mode")
mode_long = gen.const("long", str_t, "long", "Long mode")

# Frame formats
frame_format_qqvga = gen.const("QQVGA", str_t, "QQVGA", "QQVGA")
frame_format_qvga = gen.const("QVGA", str_t, "QVGA", "QVGA")
frame_format_vga = gen.const("VGA", str_t, "VGA", "VGA")
frame_format_nhd = gen.const("NHD", str_t, "NHD", "NHD")
frame_format_wxga_h = gen.const("WXGA_H", str_t, "WXGA_H", "WXGA_H")

# Frame rates
frame_rate_25 = gen.const("25", int_t, 25, "25Hz")
frame_rate_30 = gen.const("30", int_t, 30, "30Hz")
frame_rate_50 = gen.const("50", int_t, 50, "50Hz")
frame_rate_60 = gen.const("60", int_t, 60, "60Hz")

# Compressions
compression_yuy2 = gen.const("YUY2", str_t, "YUY2", "YUY2")
compression_mjpeg = gen.const("MJPEG", str_t, "MJPEG", "MJPEG")

# Depth
gen.add("enable_depth", bool_t, 0, "Enable depth", True)
depth_modes = gen.enum([mode_close, mode_long], "Depth modes")
gen.add("depth_mode", str_t, 0, "Depth mode", "close", edit_method=depth_modes)
depth_frame_formats = gen.enum([frame_format_qqvga, frame_format_qvga, frame_format_vga],
                               "Depth frame formats")
gen.add("depth_frame_format", str_t, 0, "Depth frame format", "QQVGA", edit_method=depth_frame_formats)
depth_frame_rates = gen.enum([frame_rate_25, frame_rate_30, frame_rate_50, frame_rate_60],
                             "Depth frame rates")
gen.add("depth_frame_rate", int_t, 0, "Depth frame rate", 30, 25, 60, edit_method=depth_frame_rates)

# Color
gen.add("enable_color", bool_t, 0, "Enable color", True)
color_compressions = gen.enum([compression_yuy2, compression_mjpeg],
                              "Color compressions")
gen.add("color_compression", str_t, 0, "Color compression", "MJPEG", edit_method=color_compressions)
color_frame_formats = gen.enum([frame_format_qqvga, frame_format_qvga, frame_format_vga,
                                frame_format_nhd, frame_format_wxga_h],
                               "Color frame formats")
gen.add("color_frame_format", str_t, 0, "Color frame format", "VGA", edit_method=color_frame_formats)
color_frame_rates = gen.enum([frame_rate_30],
                             "Color frame rates")
gen.add("color_frame_rate", int_t, 0, "Color frame rate", 30, 30, 30, edit_method=color_frame_rates)

exit(gen.generate(PACKAGE, "softkinetic_camera", "Softkinetic"))
